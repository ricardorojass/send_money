# Name of your application. Used to uniquely configure containers.
service: send_money

# Name of the container image.
image: reddrum7/send_money

# Deploy to these servers.
servers:
  web:
    - <%= ENV['AWS_EC2_IP_ADDRESS'] %>
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: <%= ENV['APPLICATION_HOST'] %>

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: <%= ENV['DOCKER_USERNAME'] %>

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD # what password i need to configure here?

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    RAILS_ENV: production
    RAILS_LOG_TO_STDOUT: true
    RAILS_SERVE_STATIC_FILES: true
    SOLID_QUEUE_IN_PUMA: true
    # JOB_CONCURRENCY: 3
    WEB_CONCURRENCY: 2
    RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
  db-migrate: app exec "bin/rails db:migrate"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - 'send_money_storage:/rails/storage'
  - 'send_money_uploads:/rails/public/uploads'

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:14.7
    host: <%= ENV['AWS_EC2_IP_ADDRESS'] %>
    port: '127.0.0.1:5432:5432' # is this correct?
    env:
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:7.0
    host: <%= ENV['AWS_EC2_IP_ADDRESS'] %>
    port: '127.0.0.1:6379:6379'
    directories:
      - data:/data
